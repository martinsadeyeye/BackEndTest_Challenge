<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="18" passed="18">
  <reporter-output>
  </reporter-output>
  <suite name="UserBlog Test Suite" duration-ms="35355" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:32:05Z">
    <groups>
    </groups>
    <test name="UserBlogTesting Tests" duration-ms="35355" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:32:05Z">
      <class name="requests.SearchUserTest">
        <test-method status="PASS" signature="when_getUserIsCalledWithNonExistingUserId_expect_NoResult()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUserIsCalledWithNonExistingUserId_expect_NoResult" duration-ms="4389" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:31:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUserIsCalledWithNonExistingUserId_expect_NoResult -->
        <test-method status="PASS" signature="when_getUserIsCalledWithUserId3_expect_HTTPStatusCode200()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUserIsCalledWithUserId3_expect_HTTPStatusCode200" duration-ms="1052" started-at="2019-11-04T17:31:34Z" finished-at="2019-11-04T17:31:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUserIsCalledWithUserId3_expect_HTTPStatusCode200 -->
        <test-method status="PASS" signature="when_getUserIsCalledWithUserId3_expect_IdIs3()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUserIsCalledWithUserId3_expect_IdIs3" duration-ms="1143" started-at="2019-11-04T17:31:35Z" finished-at="2019-11-04T17:31:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUserIsCalledWithUserId3_expect_IdIs3 -->
        <test-method status="PASS" signature="when_getUserIsCalledWithUserId3_expect_UsernameSamantha()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUserIsCalledWithUserId3_expect_UsernameSamantha" duration-ms="822" started-at="2019-11-04T17:31:37Z" finished-at="2019-11-04T17:31:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUserIsCalledWithUserId3_expect_UsernameSamantha -->
        <test-method status="PASS" signature="when_getUsersIsCalled_expect_ArrayIsNotEmpty()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUsersIsCalled_expect_ArrayIsNotEmpty" duration-ms="1097" started-at="2019-11-04T17:31:37Z" finished-at="2019-11-04T17:31:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUsersIsCalled_expect_ArrayIsNotEmpty -->
        <test-method status="PASS" signature="when_getUsersIsCalled_expect_HTTPStatusCode200()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUsersIsCalled_expect_HTTPStatusCode200" duration-ms="1323" started-at="2019-11-04T17:31:39Z" finished-at="2019-11-04T17:31:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUsersIsCalled_expect_HTTPStatusCode200 -->
        <test-method status="PASS" signature="when_getUsersIsCalled_expect_HeaderContentTypeToBeApplicationJson()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUsersIsCalled_expect_HeaderContentTypeToBeApplicationJson" duration-ms="929" started-at="2019-11-04T17:31:40Z" finished-at="2019-11-04T17:31:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUsersIsCalled_expect_HeaderContentTypeToBeApplicationJson -->
        <test-method status="PASS" signature="when_getUsersIsCalled_expect_SamanthaToBeOnUserList()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="when_getUsersIsCalled_expect_SamanthaToBeOnUserList" duration-ms="1082" started-at="2019-11-04T17:31:41Z" finished-at="2019-11-04T17:31:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getUsersIsCalled_expect_SamanthaToBeOnUserList -->
      </class> <!-- requests.SearchUserTest -->
      <class name="requests.FetchUserPostCommentsTest">
        <test-method status="PASS" signature="setBaseURI()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="setBaseURI" is-config="true" duration-ms="491" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:31:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBaseURI -->
        <test-method status="PASS" signature="setBaseURI()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="setBaseURI" is-config="true" duration-ms="1" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:31:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBaseURI -->
        <test-method status="PASS" signature="setBaseURI()[pri:0, instance:requests.SearchUserTest@6276ae34]" name="setBaseURI" is-config="true" duration-ms="0" started-at="2019-11-04T17:31:30Z" finished-at="2019-11-04T17:31:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setBaseURI -->
        <test-method status="PASS" signature="when_getCommentIsCalledWithPostId_expect_OnlyCommentsRelatedToSpecifiedPost()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="when_getCommentIsCalledWithPostId_expect_OnlyCommentsRelatedToSpecifiedPost" duration-ms="921" started-at="2019-11-04T17:31:47Z" finished-at="2019-11-04T17:31:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getCommentIsCalledWithPostId_expect_OnlyCommentsRelatedToSpecifiedPost -->
        <test-method status="PASS" signature="when_getCommentsIsCalled_expect_ArrayIsNotEmpty()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="when_getCommentsIsCalled_expect_ArrayIsNotEmpty" duration-ms="1148" started-at="2019-11-04T17:31:48Z" finished-at="2019-11-04T17:31:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getCommentsIsCalled_expect_ArrayIsNotEmpty -->
        <test-method status="PASS" signature="when_getCommentsIsCalled_expect_HTTPStatusCode200()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="when_getCommentsIsCalled_expect_HTTPStatusCode200" duration-ms="1041" started-at="2019-11-04T17:31:50Z" finished-at="2019-11-04T17:31:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getCommentsIsCalled_expect_HTTPStatusCode200 -->
        <test-method status="PASS" signature="when_getCommentsIsCalled_expect_HeaderContentTypeToBeApplicationJson()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="when_getCommentsIsCalled_expect_HeaderContentTypeToBeApplicationJson" duration-ms="1086" started-at="2019-11-04T17:31:51Z" finished-at="2019-11-04T17:31:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getCommentsIsCalled_expect_HeaderContentTypeToBeApplicationJson -->
        <test-method status="PASS" signature="when_getCommentsIsCalled_expect_ResultCanBeFilteredByUser()[pri:0, instance:requests.FetchUserPostCommentsTest@3c09711b]" name="when_getCommentsIsCalled_expect_ResultCanBeFilteredByUser" duration-ms="13204" started-at="2019-11-04T17:31:52Z" finished-at="2019-11-04T17:32:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getCommentsIsCalled_expect_ResultCanBeFilteredByUser -->
      </class> <!-- requests.FetchUserPostCommentsTest -->
      <class name="requests.FetchUserPostsTest">
        <test-method status="PASS" signature="when_getPostByUserIdIsCalledWithInvalidUserId_expect_EmptyResult()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="when_getPostByUserIdIsCalledWithInvalidUserId_expect_EmptyResult" duration-ms="1307" started-at="2019-11-04T17:31:42Z" finished-at="2019-11-04T17:31:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getPostByUserIdIsCalledWithInvalidUserId_expect_EmptyResult -->
        <test-method status="PASS" signature="when_getPostByUserIdIsCalledWithValidUserId_expect_ArrayIsNotEmpty()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="when_getPostByUserIdIsCalledWithValidUserId_expect_ArrayIsNotEmpty" duration-ms="1229" started-at="2019-11-04T17:31:43Z" finished-at="2019-11-04T17:31:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getPostByUserIdIsCalledWithValidUserId_expect_ArrayIsNotEmpty -->
        <test-method status="PASS" signature="when_getPostByUserIdIsCalledWithValidUserId_expect_HTTPStatusCode200()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="when_getPostByUserIdIsCalledWithValidUserId_expect_HTTPStatusCode200" duration-ms="1024" started-at="2019-11-04T17:31:44Z" finished-at="2019-11-04T17:31:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getPostByUserIdIsCalledWithValidUserId_expect_HTTPStatusCode200 -->
        <test-method status="PASS" signature="when_getPostByUserIdIsCalledWithValidUserId_expect_HeaderContentTypeToBeApplicationJson()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="when_getPostByUserIdIsCalledWithValidUserId_expect_HeaderContentTypeToBeApplicationJson" duration-ms="932" started-at="2019-11-04T17:31:45Z" finished-at="2019-11-04T17:31:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getPostByUserIdIsCalledWithValidUserId_expect_HeaderContentTypeToBeApplicationJson -->
        <test-method status="PASS" signature="when_getPostByUserIdIsCalledWithValidUserId_expect_OnlySpecifiedUserPostsAreReturned()[pri:0, instance:requests.FetchUserPostsTest@7946e1f4]" name="when_getPostByUserIdIsCalledWithValidUserId_expect_OnlySpecifiedUserPostsAreReturned" duration-ms="1102" started-at="2019-11-04T17:31:46Z" finished-at="2019-11-04T17:31:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- when_getPostByUserIdIsCalledWithValidUserId_expect_OnlySpecifiedUserPostsAreReturned -->
      </class> <!-- requests.FetchUserPostsTest -->
    </test> <!-- UserBlogTesting Tests -->
  </suite> <!-- UserBlog Test Suite -->
</testng-results>
